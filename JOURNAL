Introduction
The purpose of this assignment is to evaluate your ability to work with programming tasks that resemble the day-to-day activities of the Kanzi R&D team at Rightware. This assignment focuses on C++ programming and general middleware development practices.

Kanzi R&D lists following characteristics valuable in written code and you should keep them in mind while working on the assignment. Both code and documentation quality will be evaluated.

 Safety
 Modularity
 Efficiency
 Readability & Maintainability
 Reliability & Simplicity

Instructions

- Write a C++ class, which can be used to output application log messages to multiple outputs
- Focus both on the quality of the code and to the usability of the class (API).

- Send your solution to Rightware in a ZIP package containing the following contents:
	o source code, solution and project files
	o executable that is outputting log messages
	o instructionshowtocompile
	o list of 3rd party dependencies, if any
	o brief description of the work sample including rationale behind the implementation, as well
	as its possible shortcomings and known issues o ideas for further development

Requirements
	- Implementation language is C++ (with C++11 features available)
	- The logger needs to support multiple threads
	- The logger needs to be able to support multiple outputs (file, console etc.)
	- The logger needs to be able to support outputting user types
	- The logger class API needs to be documented and validated with unit test(s)
	- The executable code should work either on Windows (preferred), Mac OS X or Linux

Fri Apr  6 11:34:40 EEST 2018
============================

So.

We need to create a logger class.

A logger needs to logs things.

So, how would we use this thing ?

unique_ptr<Logger> logger = make_unique<Logger()>;

C++11 features.
Does C++11 have make unique ?
Yes.

Let's use smart pointers, just because we can, and it's much easier to maintain.

// What options do we need to set with the logger ?

// Output destination
// Input

Should we do ?

logger << "This is our log message";

Nah we don't want to do << operator overloading, it requires too much complex changes, and also prevents us from using this logger interface outside C++ easily.

// Where are we outputting ?
// File, console, possibly network
// Let's implement file and console for now, but take into account that it might be something generalized we need to implement

// How would we set the output ? Ideally the logger class would not contain any information about how the messages are actually stored
// It could just let a LoggerOutput class handle the actual storage of the messages

// This way you can implement for example FileOutput, ConsoleOutput, NetworkOutput classes that extend from the LoggerOutput class
// and implement the actual storage and required details there like mutex locking ?

// We should just set the path to which we want to log to
// The logger parses a path
// Then based on the path, decides which internal output class to use for the actual outputting
// So actually we implement the outputter inside the logger, so that the caller doesn't also have
// to care about the output class or ownership of that

// Make it easy to use, and natural, no need to figure out some ENUMS or combinations of types and strings,  
// just define a clear set of output path options for the user, and document how they work
// This way the logger can also be extended easily, just add more path types and internal output classes inside the logger
// The external API stays the same, only the internal implementation changes

unique_ptr<Logger> logger = make_unique<Logger()>;
if (logger) {
	logger->set_log_level(Logger::MSG || Logger::INFO || Logger::WARN);

	//logger->set_output_path("console");
	//logger->set_output_path("https://localhost.dev:3000/log");
	logger->set_output_path("/tmp/test_log_01.txt");
}

logger->log(Logger::INFO, "All systems initialized");
logger->log(Logger::CMD, "Set warp speed to 7");

It should be this easy. We create the logger, we set the log level that we are outputting messages at, and we set the output class that will handle the outputting of the messages.

We need to be able to output user types ? What does this mean ?
I guess you would need to be able to output custom types.

So basically we have some custom user types and you would need to be able to output those.
I guess those types would have some sort of output method within them that knows how to convert them to strings or serialize them.

// We assume our user type classes can implement a method to convert them to strings
class UserType {
	public:
		std::wstring to_string();
};

We don't want to start overloading operators here, that just adds complexity and unknown factors.
Let's be functional and simple.

How about multithreading ?
What would this mean ?

I guess it means the output to the same output from different threads should be somehow mutex locked.


Mon Apr  9 11:10:04 EEST 2018
============================

Would it be still easier and better just to overload << for the logger for output?
This is going to be mainly a C++ library after all, and using << for strings and also user objects is more intuitive than figuring out what method we should implement for each user defined type.

The only downside is that << doesn't immediately work with scripting languages for example, but we could just define some methods that are bound.

Basically..

We would then need just to replace the output path with a stream.
Also would be beneficial for not having to figure out different methods for different outputs, we could just forward the logging into the stream we are using to output to. But how would we then define a log level for the message?

What if we want to have different log levels for each message?
Like .. ok this is a fatal message, and this is just a warning?
What if we want to just log the fatal messages ?

unique_ptr<Logger> logger = make_unique<Logger()>;
if (logger) {
	logger->set_log_level(Logger::MSG || Logger::INFO || Logger::WARN);

	//logger->set_output_path("console");
	//logger->set_output_path("https://localhost.dev:3000/log");
	logger->set_output_path("/tmp/test_log_01.txt");
}

logger->log(Logger::INFO, "All systems initialized");
logger->log(Logger::CMD, "Set warp speed to 7");

logger << log_msg(Logger::INFO, "All systems initialized");

log << { Logger::INFO, "All systems initialized" };

We could of course do something like this.

log << "We have done it now":

log(Logger::MSG, "We have done it now");

For the user defined types though we could just log the string version of that class also.
But then we would have to define some kind of base class that is used for logging the user types.

we could do something like this though too:

log(Logger::INFO) << "The user " << sakari << " has logged in ":

How would we initialize this class then ?
Do we want to have a global instance of the class ?

Let's start implementing and see how the usage goes naturally.

logger->set_log_level(Logger::MSG || Logger::INFO || Logger::WARN);
logger->set_output_stream(stdout);
LOG(Logger::MSG) << "Sakari is here";

Let's start with this kind of simple implementation.
We can then figure out how to use it globally
We are going to anyway need a instance of the logger class somewhere.

Take some hints from this implementation:

https://stackoverflow.com/questions/40273809/how-to-write-iostream-like-interface-to-logging-library/40424272#40424272

Tue Apr 10 10:42:28 EEST 2018
============================

So, how do we filter the logging output according to the logging level properly ?

Let's agree that we do the filtering runtime.
We don't want to have compile time filtering, as this would require recompiling the project each time we change the log level.

We can have a define that figures out if we completely disable the logging, and then optimizes the logging operations away completely.

Okay, so we have basic functionality working already.

How about setting the output stream ?
Do we want to set the output stream ?

If we we just set the stream, this would mean we would have to open a file manually and pass it to the logger.
We don't really want to do that.

So.. Maybe we should do something like this:

logger.add_output(Logger::FileOutput("/tmp/log.txt", FLAGS);
logger.add_output(Logger::ConsoleOutput(std::cerr));

This way we can provide a base class that implements the outputter, and then extend that to provide default mechanisms for outputting the log messages. This could mean the user of this API could also extend the outputter easily, providing mechanisms for example sending SMS messages or transmitting the logs to another server or whatever you need to do.

So, let's implement a really simple LoggerOutput class that implements these basics.
What methods would we need for this class ?

- init
	- Implement in constructor
	- Closing happens in destructor

- dispatch
	- Send or dispatch the log messages to the destination

Well that is the very basic of it.
We would need to support output to multiple destinations also, and multithreading support.
Where would we have to take multithreading into account ? Either in the flush() of the Logger or in the actual implementation of the outputter classes.

So, we would need to keep a list of outputs.
We can add them in sequential order, and each log message is formatted within the Logger, and then dispatched when flushing to our outputs in the order they were added.

Let's implement first a basic class for outputting to stdout
And implement it just as a static object, after that works implement as a std::vector<LoggerOutput> or such.

How about implementing the LoggerOutput ?
Should we override the << operator also in here ?

Or just implement .dispatch()
Is there any benefit in either ?

LoggerFileOutput file_output("/tmp/log.txt", FLAGS);
file_output << "[16:32:20] Dem Engines be on Fire!\n";

It's not really clear here what happens.
Is the output written to the file ? Or buffered ?
Should probably be cleaner just to implement 

write_log_entry();

So it is more clear.
The internal implementation might buffer the output for example for a while, or do something else with it.
If we overwrite <<, we are assuming that the output is going to be handled right away.

Besides, the logger class handles the conversion of the user data objects also to strings or any format that is required for the LoggerOutput classes to handle.

Let's assume we are only writing string data.

Okay, basic console output implemented.

TODO:
	- Implement file outputter
		- Basic version done

	- Multiple output support
		- Done

	- Test and support logging user types
		- Create a class that has overwritten << so that we can override it	

	- Multithreading safety
	- Write tests
	- Document API

Wut next.
File outputter would be pretty easy to implement.

Okay we have very basic file output.

Let's test logging user types.
